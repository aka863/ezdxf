#!/usr/bin/env python
#coding:utf-8
# Author:  mozman -- <mozman@gmx.at>
# Purpose: database module
# Created: 11.03.2011
# Copyright (C) 2011, Manfred Moitzi
# License: GPLv3

from collections import OrderedDict

def factory(debug=False):
    return DebugDB() if debug else EntityDB()

class EntityDB:
    """ A simple key/value database a.k.a. dict(), but can be replaced.

    The Data Model

    Every entity/object, except tables and sections, are represented as
    tag-list (see Tags Class), this lists are stored in the drawing-associated
    database, database-key is the 'handle' tag (code == 5 or 105).

    For the entity/object manipulation this tag-list will be wrapped into
    separated classes, which are generated by the dxfengine-object.
    The dxfengine-object generates DXF-Version specific wrapper classes.

    """
    def __init__(self):
        self._database = {}

    def __delitem__(self, key):
        del self._database[key]

    def __getitem__(self, handle):
        return self._database[handle]

    def __setitem__(self, handle, entity):
        self._database[handle] = entity

    def __contains__(self, handle):
        return handle in self._database

    def __len__(self):
        return len(self._database)

    def __iter__(self):
        return iter(self._database)

class DebugDB(EntityDB):
    TAGFMT = "(%d, %s)"
    def __init__(self):
        self._database = OrderedDict()
        self._collisions = {}
        self._stream = None
        self._verbose = True

    def __setitem__(self, handle, entity):
        if handle in self:
            collisions = self._collisions.setdefault(handle, [])
            collisions.append(self[handle])
        super(DebugDB, self).__setitem__(handle, entity)

    def _setparams(self, stream, verbose):
        self._stream = stream
        self._verbose = verbose

    def printtags(self, tags):
        def tostring(tags):
            return " ".join( (self.TAGFMT % tag for tag in tags) )

        if self._verbose:
            self.println(str(tags))
        else:
            self.println(tostring(tags))

    def println(self, text=""):
        self._stream.write(text+'\n')

    def dumpcollisions(self, stream, verbose=True):
        def dump_entry(handle):
            self.println()
            self.println("Handle: %s" % handle)
            collisions = self._collisions[handle]
            dump_collision(collisions)

        def dump_collision(collisions):
            self.println("Count: %d" % len(collisions))
            for tags in collisions:
                self.printtags(tags)

        self._setparams(stream, verbose)
        self.println("Database contains %d collisions." % len(self._collisions))
        for handle in self._collisions:
            dump_entry(handle)

    def dumpcontent(self, stream, verbose=True):
        def dump_entry(handle):
            self.println()
            self.println("Handle: %s" % handle)
            self.printtags(self[handle])

        self._setparams(stream, verbose)
        self.println("Database contains %d entries." % len(self))
        for handle in self:
            dump_entry(handle)
